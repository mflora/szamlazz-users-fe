{
    "pipes": [],
    "interfaces": [],
    "injectables": [
        {
            "name": "ModifyUserService",
            "id": "injectable-ModifyUserService-6c4157471bdd671b3d26018eaa170d37e6be1be6d62f47bab009438e7ba57adf13c463df4d4ee13317d33ac3b407574d8e305135310f420b5c9f6be011835fc8",
            "file": "src/services/modify-user.service.ts",
            "properties": [
                {
                    "name": "user",
                    "defaultValue": "undefined",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | undefined",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [
                {
                    "name": "get",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "set",
                    "args": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport {User} from \"../../types/User\";\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ModifyUserService {\r\n  user: User | undefined = undefined;\r\n\r\n  constructor() { }\r\n\r\n  set (user: User){\r\n    this.user = user;\r\n  }\r\n\r\n  get () {\r\n    return this.user;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "UsersService",
            "id": "injectable-UsersService-1d7912eef2d9cebf93e891ada737bfb7cce266456a45d825f04758cc80e9653fc2f0a37c636be8641c1e85a578e12233c8fb151b7ae75aa72b4f93fdb4f17955",
            "file": "src/services/users.service.ts",
            "properties": [
                {
                    "name": "BASE_PATH",
                    "defaultValue": "\"http://localhost:8888/api/users\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "httpOptions",
                    "defaultValue": "{\r\n    headers: new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n      'Access-Control-Allow-Origin': '*',\r\n      'Access-Control-Allow-Methods': 'DELETE, POST, GET, OPTIONS',\r\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization, X-Requested-With',\r\n      'withCredentials': 'true'\r\n    }),\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methods": [
                {
                    "name": "deleteUser",
                    "args": [
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "listUsers",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "saveUser",
                    "args": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<User>",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateUser",
                    "args": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<User>",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport {HttpClient, HttpHeaders} from \"@angular/common/http\";\r\nimport {User} from \"../../types/User\";\r\nimport {Observable} from \"rxjs\";\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UsersService {\r\n\r\n  BASE_PATH= \"http://localhost:8888/api/users\";\r\n  httpOptions = {\r\n    headers: new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n      'Access-Control-Allow-Origin': '*',\r\n      'Access-Control-Allow-Methods': 'DELETE, POST, GET, OPTIONS',\r\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization, X-Requested-With',\r\n      'withCredentials': 'true'\r\n    }),\r\n  };\r\n  constructor(private http: HttpClient) { }\r\n\r\n  saveUser(user: User): Observable<User>{\r\n    return this.http.post<User>(this.BASE_PATH, user, this.httpOptions);\r\n  }\r\n\r\n  updateUser(user: User): Observable<User> {\r\n    return this.http.put<User>(`${this.BASE_PATH}/${user.id}`, user, this.httpOptions);\r\n  }\r\n\r\n  listUsers(): Observable<any> {\r\n    return this.http.get(this.BASE_PATH, this.httpOptions);\r\n  }\r\n\r\n  deleteUser(userId: number): Observable<any> {\r\n    return this.http.delete(`${this.BASE_PATH}/${userId}`, this.httpOptions);\r\n  }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-3a821ef4a37ac7f74bc57e79af189192eecac28021e1080cddb1f15277458d9cd512229ffcd7ba91d003d0768b0523d746b70ab0cf890fc77af4cd6f3f6ff60a",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'users-fe'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterOutlet"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { RouterOutlet } from '@angular/router';\r\n\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  standalone: true,\r\n  imports: [RouterOutlet],\r\n  templateUrl: './app.component.html',\r\n  styleUrl: './app.component.scss'\r\n})\r\nexport class AppComponent {\r\n  title = 'users-fe';\r\n\r\n  constructor() {}\r\n}\r\n",
            "styleUrl": "./app.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 13
            },
            "extends": [],
            "templateData": "<router-outlet />\r\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-19b6ebac3556126b38d664947c8f5334dd8d56c1b2c9da5def28489f2434acf38134bdc1346c6ff0245eb504b626b5deb3d559fc937dc7428701cb451e0b62d3",
            "file": "src/components/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-button",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "buttonStyle",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe color schema of the button\n",
                    "description": "<p>The color schema of the button</p>\n",
                    "line": 40,
                    "type": "\"primary\" | \"secondary\" | \"secondary-ghost\"",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "iconName",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nName of the FontAwesomeIcon you can find the icons here: https://fontawesome.com/icons\n",
                    "description": "<p>Name of the FontAwesomeIcon you can find the icons here: <a href=\"https://fontawesome.com/icons\">https://fontawesome.com/icons</a></p>\n",
                    "line": 34,
                    "type": "IconDefinition | null",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis string will appear as the button's label. If empty, an icon button will appear.\n",
                    "description": "<p>This string will appear as the button&#39;s label. If empty, an icon button will appear.</p>\n",
                    "line": 22,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "\"button\" | \"submit\" | \"reset\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nClick event for the button.\n",
                    "description": "<p>Click event for the button.</p>\n",
                    "line": 28,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgClass"
                },
                {
                    "name": "FaIconComponent",
                    "type": "component"
                },
                {
                    "name": "NgIf"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, Output} from '@angular/core';\r\nimport {NgClass, NgIf} from \"@angular/common\";\r\nimport {FaIconComponent} from \"@fortawesome/angular-fontawesome\";\r\nimport { IconDefinition} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\n@Component({\r\n  selector: 'app-button',\r\n  standalone: true,\r\n  imports: [\r\n    NgClass,\r\n    FaIconComponent,\r\n    NgIf\r\n  ],\r\n  templateUrl: './button.component.html',\r\n  styleUrl: './button.component.scss'\r\n})\r\nexport class ButtonComponent {\r\n  /**\r\n   * This string will appear as the button's label. If empty, an icon button will appear.\r\n   * */\r\n  @Input()\r\n  label = '';\r\n\r\n  /**\r\n   * Click event for the button.\r\n   * */\r\n  @Output()\r\n  onClick = new EventEmitter();\r\n\r\n  /**\r\n   * Name of the FontAwesomeIcon you can find the icons here: https://fontawesome.com/icons\r\n   * */\r\n  @Input()\r\n  iconName:IconDefinition | null = null;\r\n\r\n  /**\r\n   * The color schema of the button\r\n   */\r\n  @Input()\r\n  buttonStyle: 'primary' | 'secondary' | 'secondary-ghost' = 'primary'\r\n\r\n  @Input()\r\n  disabled = false;\r\n\r\n  @Input()\r\n  type: 'button' | 'submit' | 'reset' = 'button'\r\n\r\n\r\n}\r\n",
            "styleUrl": "./button.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<button (click)=\"onClick.emit()\"\r\n        class=\"btn-container\"\r\n        [ngClass]=\"[label ? buttonStyle : 'icon-button']\"\r\n        [disabled]=\"disabled\"\r\n        [type]=\"type\"\r\n>\r\n  <fa-icon *ngIf=\"iconName !== null\" [icon]=\"iconName\" class=\"icon\"></fa-icon>{{label}}\r\n</button>\r\n\r\n\r\n"
        },
        {
            "name": "CheckboxComponent",
            "id": "component-CheckboxComponent-5996593aa3afc13031f1b1224025ffe7c91a9c0a1eaba642fa81e5934d37ecc1f94f68413dcb2614d2f485a6462b2e9e367ae16bd53d30d89d6de22194812a73",
            "file": "src/components/checkbox/checkbox.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-checkbox",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./checkbox.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "checked",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "control",
                    "defaultValue": "new FormControl(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCheckedChange",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "checkedChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, Output} from '@angular/core';\r\nimport {FormControl, ReactiveFormsModule} from \"@angular/forms\";\r\n\r\n@Component({\r\n  selector: 'app-checkbox',\r\n  standalone: true,\r\n  imports: [\r\n    ReactiveFormsModule\r\n  ],\r\n  templateUrl: './checkbox.component.html',\r\n  styleUrl: './checkbox.component.scss'\r\n})\r\nexport class CheckboxComponent {\r\n  @Input()\r\n  checked = false;\r\n  @Input()\r\n  label= '';\r\n  @Input()\r\n  control = new FormControl(false);\r\n\r\n  @Output()\r\n  onCheckedChange = new EventEmitter<boolean>();\r\n\r\n  checkedChange() {\r\n    this.checked = ! this.checked;\r\n    this.onCheckedChange.emit(this.checked);\r\n  }\r\n\r\n  get value(): boolean{\r\n    return this.control.value!;\r\n  }\r\n\r\n  set value(val: boolean) {\r\n    this.control.setValue(val);\r\n    this.onCheckedChange.emit(val);\r\n  }\r\n}\r\n",
            "styleUrl": "./checkbox.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 33,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 29
                    }
                }
            },
            "templateData": "<div class=\"checkbox-container\">\r\n  <input [formControl]=\"control\" type=\"checkbox\" (change)=\"checkedChange()\"/>\r\n  <div class=\"checkbox-label\">{{label}}</div>\r\n</div>\r\n"
        },
        {
            "name": "CreateUserComponent",
            "id": "component-CreateUserComponent-0034e389cfece79d43970d085e06b3dfa2cd4b7c5af3da0225cf3ca5ede73c0cf1b8c9ccc5a396112184577c33a31a2a577a12210c174cb4eb461025fa18860d",
            "file": "src/pages/create-user/create-user.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-create-user",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./create-user.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "address",
                    "defaultValue": "new FormControl('', [Validators.maxLength(128)])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "createUserForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "firstName",
                    "defaultValue": "new FormControl('', [Validators.required, Validators.minLength(2), Validators.maxLength(64)])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "job",
                    "defaultValue": "new FormControl('', Validators.required)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "lastName",
                    "defaultValue": "new FormControl('', [Validators.required, Validators.minLength(2), Validators.maxLength(64)])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "options",
                    "defaultValue": "jobOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "telephone",
                    "defaultValue": "new FormControl('', [Validators.maxLength(128), Validators.pattern('^(?:06|\\\\+36|0036)\\\\d{8,9}$')])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "methodsClass": [
                {
                    "name": "createUser",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "navigateToUserList",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "InputComponent",
                    "type": "component"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "DropdownComponent",
                    "type": "component"
                },
                {
                    "name": "ModalComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component} from '@angular/core';\r\nimport {InputComponent} from \"../../components/input/input.component\";\r\nimport {ButtonComponent} from \"../../components/button/button.component\";\r\nimport {UsersService} from \"../../services/users.service\";\r\nimport {Router} from \"@angular/router\";\r\nimport {FormBuilder, FormControl, FormGroup, ReactiveFormsModule, Validators} from \"@angular/forms\";\r\nimport {DropdownComponent} from \"../../components/dropdown/dropdown.component\";\r\nimport {jobOptions} from \"../_utils/dropdown-options\";\r\nimport {ModalComponent} from \"../../components/modal/modal.component\";\r\n\r\n@Component({\r\n  selector: 'app-create-user',\r\n  standalone: true,\r\n  imports: [\r\n    InputComponent,\r\n    ButtonComponent,\r\n    ReactiveFormsModule,\r\n    DropdownComponent,\r\n    ModalComponent\r\n  ],\r\n  templateUrl: './create-user.component.html',\r\n  styleUrl: './create-user.component.scss'\r\n})\r\nexport class CreateUserComponent{\r\n  createUserForm: FormGroup;\r\n\r\n  firstName = new FormControl('', [Validators.required, Validators.minLength(2), Validators.maxLength(64)]);\r\n  lastName = new FormControl('', [Validators.required, Validators.minLength(2), Validators.maxLength(64)]);\r\n  address = new FormControl('', [Validators.maxLength(128)]);\r\n  telephone = new FormControl('', [Validators.maxLength(128), Validators.pattern('^(?:06|\\\\+36|0036)\\\\d{8,9}$')]);\r\n  job = new FormControl('', Validators.required);\r\n\r\n  options = jobOptions;\r\n\r\n  constructor(private usersService: UsersService, private router: Router, private formBuilder: FormBuilder) {\r\n    this.createUserForm = this.formBuilder.group({\r\n      firstName: this.firstName,\r\n      lastName: this.lastName,\r\n      address: this.address,\r\n      telephone: this.telephone,\r\n      job: this.job\r\n    })\r\n  }\r\n\r\n  navigateToUserList() {\r\n    this.router.navigateByUrl('');\r\n  }\r\n\r\n  createUser() {\r\n    let user = this.createUserForm.value;\r\n    user.active = true;\r\n    this.usersService.saveUser(user).subscribe(() => this.navigateToUserList());\r\n  }\r\n}\r\n",
            "styleUrl": "./create-user.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "usersService",
                        "type": "UsersService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "usersService",
                        "type": "UsersService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"container\">\r\n  <div class=\"title\">Új felhasználó hozzáadása</div>\r\n  <form [formGroup]=\"createUserForm\">\r\n    <app-input [label]=\"'Vezetéknév'\" [control]=\"lastName\"/>\r\n    <app-input [label]=\"'Keresztnév'\" [control]=\"firstName\"/>\r\n    <app-input [label]=\"'Cím'\" [control]=\"address\"/>\r\n    <app-input [label]=\"'Telefon'\" [control]=\"telephone\"/>\r\n    <app-dropdown [label]=\"'Foglalkozás'\" [control]=\"job\" [options]=\"options\"/>\r\n    <div class=\"buttons-container\">\r\n      <app-button [label]=\"'Létrehozás'\" (onClick)=\"createUser()\" [disabled]=\"createUserForm.invalid\"/>\r\n      <app-button [label]=\"'Mégsem'\" [buttonStyle]=\"'secondary-ghost'\" (onClick)=\"navigateToUserList()\"/>\r\n    </div>\r\n  </form>\r\n</div>\r\n"
        },
        {
            "name": "DropdownComponent",
            "id": "component-DropdownComponent-ca61c8726d71b59018bc12ffb3cf36aa01ed3c256c54550bd73ded2e7fee35c5112c4f5f56c81baaf6187b7358f5b41108055548cd010f218a1745d7db103253",
            "file": "src/components/dropdown/dropdown.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dropdown",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./dropdown.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "control",
                    "defaultValue": "new FormControl('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "options",
                    "defaultValue": "new Array<{value: string, displayName: string}>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onSelectionChange",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "faChevronDown",
                    "defaultValue": "faChevronDown",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "isModalOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "selectedValueDisplay",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "methodsClass": [
                {
                    "name": "selectionChange",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDropdownValue",
                    "args": [
                        {
                            "name": "option",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleDropdown",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FaIconComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, Output} from '@angular/core';\r\nimport {FormControl, ReactiveFormsModule} from \"@angular/forms\";\r\nimport {CommonModule} from \"@angular/common\";\r\nimport {FaIconComponent} from \"@fortawesome/angular-fontawesome\";\r\nimport {faChevronDown} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\n@Component({\r\n  selector: 'app-dropdown',\r\n  standalone: true,\r\n  imports: [\r\n    ReactiveFormsModule,\r\n    CommonModule,\r\n    FaIconComponent\r\n  ],\r\n  templateUrl: './dropdown.component.html',\r\n  styleUrl: './dropdown.component.scss'\r\n})\r\nexport class DropdownComponent {\r\n  @Input()\r\n  label = '';\r\n  @Input()\r\n  options = new Array<{value: string, displayName: string}>();\r\n\r\n  @Output()\r\n  onSelectionChange = new EventEmitter<string>();\r\n\r\n  @Input()\r\n  control = new FormControl('');\r\n\r\n  isModalOpen = false;\r\n  selectedValueDisplay = '';\r\n\r\n  selectionChange(value: string) {\r\n    this.onSelectionChange.emit(value);\r\n  }\r\n\r\n  get value(): string{\r\n    return this.control.value!;\r\n  }\r\n\r\n  set value(val: string) {\r\n    this.control.setValue(val);\r\n    this.onSelectionChange.emit(val);\r\n  }\r\n\r\n  protected readonly faChevronDown = faChevronDown;\r\n\r\n  toggleDropdown() {\r\n    this.isModalOpen = !this.isModalOpen;\r\n  }\r\n\r\n  setDropdownValue(option: { value: string; displayName: string }) {\r\n    this.selectedValueDisplay = option.displayName;\r\n    this.value = option.value;\r\n    this.isModalOpen = false;\r\n  }\r\n}\r\n",
            "styleUrl": "./dropdown.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 41,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "string",
                        "returnType": "string",
                        "line": 37
                    }
                }
            },
            "templateData": "<!--<div class=\"input-container\" [ngClass]=\"control.invalid && control.touched ? 'invalid-input' : ''\">-->\r\n<!--  <div>{{label}}</div>-->\r\n<!--  <select #dropdown [formControl]=\"control\" (change)=\"selectionChange(dropdown.value)\">-->\r\n<!--    <option *ngFor=\"let opt of options\" [value]=\"opt.value\" class=\"option\">{{ opt.displayName }}</option>-->\r\n<!--  </select>-->\r\n<!--</div>-->\r\n<!--<div class=\"error-messages\">-->\r\n<!--  <div *ngIf=\"control.invalid && control.touched && control.errors?.['required']\">A mező kitöltése kötelező</div>-->\r\n<!--</div>-->\r\n\r\n<div class=\"custom-select\" [ngClass]=\"[isModalOpen ? 'active' : '', control.invalid && control.touched ? 'invalid-input' : '']\" >\r\n  <button\r\n    class=\"select-button\"\r\n    role=\"combobox\"\r\n    aria-labelledby=\"select button\"\r\n    aria-haspopup=\"listbox\"\r\n    aria-expanded=\"false\"\r\n    aria-controls=\"select-dropdown\"\r\n    (click)=\"toggleDropdown()\"\r\n  >\r\n    <input [formControl]=\"control\" #dropdown class=\"selected-value\" [value]=\"selectedValueDisplay\"/>\r\n    <span class=\"arrow\"><fa-icon [icon]=\"faChevronDown\" [size]=\"'xs'\"/></span>\r\n  </button>\r\n  <ul\r\n    class=\"select-dropdown\"\r\n    role=\"listbox\"\r\n    id=\"select-dropdown\"\r\n  >\r\n    <li *ngFor=\"let option of options\" role=\"option\" (click)=\"setDropdownValue(option)\">\r\n      <input type=\"radio\" [id]=\"option.value\" name=\"job\" />\r\n      <label [for]=\"option.value\">{{ option.displayName }}</label>\r\n    </li>\r\n  </ul>\r\n</div>\r\n"
        },
        {
            "name": "InputComponent",
            "id": "component-InputComponent-dba3f0df81a466ee76c55147cabb6691434c0caec7dd96e12fca7e2ab9020b63978874a25e5993913b3ec1401ad811a5ec6c62749f2829c45da15bbca5e4d473",
            "file": "src/components/input/input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-input",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./input.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "control",
                    "defaultValue": "new FormControl('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Label'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "name",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'text'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "\"text\" | \"email\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter<string>",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "valueSubject",
                    "defaultValue": "new BehaviorSubject<string>('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<string>",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "applyContainerBlur",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "makeBlurred",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "makeFocused",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onInput",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "valueChangeHandler",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "NgClass"
                },
                {
                    "name": "NgIf"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  EventEmitter,\r\n  Input, OnDestroy,\r\n  OnInit,\r\n  Output,\r\n} from '@angular/core';\r\nimport {BehaviorSubject, debounceTime,} from \"rxjs\";\r\nimport {FormControl, FormsModule, ReactiveFormsModule} from \"@angular/forms\";\r\nimport {NgClass, NgIf} from \"@angular/common\";\r\n\r\n@Component({\r\n  selector: 'app-input',\r\n  standalone: true,\r\n  imports: [\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    NgClass,\r\n    NgIf\r\n  ],\r\n  templateUrl: './input.component.html',\r\n  styleUrl: './input.component.scss'\r\n})\r\nexport class InputComponent implements OnInit, OnDestroy {\r\n\r\n  private valueSubject: BehaviorSubject<string> = new BehaviorSubject<string>('');\r\n\r\n  @Input()\r\n  type: 'text' | 'email' = 'text';\r\n  @Input()\r\n  label = 'Label';\r\n  @Input()\r\n  disabled = false;\r\n  @Input()\r\n  name = '';\r\n  @Input()\r\n  control = new FormControl('');\r\n\r\n  @Output()\r\n  valueChange = new EventEmitter<string>;\r\n\r\n  ngOnInit(): void {\r\n    this.valueSubject.pipe(debounceTime(500))\r\n      .subscribe(() => {\r\n        this.valueChangeHandler();\r\n      });\r\n  }\r\n\r\n  get value(): string{\r\n    return this.control.value!;\r\n  }\r\n\r\n  set value(val: string) {\r\n    this.control.setValue(val);\r\n    this.valueChange.emit(val);\r\n  }\r\n\r\n  onInput(){\r\n    this.valueSubject.next(this.value);\r\n  }\r\n  valueChangeHandler() {\r\n    this.valueChange.emit(this.value);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.valueSubject.complete();\r\n  }\r\n\r\n  makeFocused($event: any) {\r\n    $event.currentTarget.classList.add('focused');\r\n  }\r\n\r\n  makeBlurred($event: any) {\r\n    $event.currentTarget.classList.remove('focused');\r\n  }\r\n\r\n  applyContainerBlur($event: any) {\r\n    $event.target.parentNode.classList.remove('focused');\r\n  }\r\n}\r\n",
            "styleUrl": "./input.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 53,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "string",
                        "returnType": "string",
                        "line": 49
                    }
                }
            },
            "templateData": "<div class=\"input-container\" (click)=\"makeFocused($event)\"\r\n     (blur)=\"makeBlurred($event)\"\r\n     tabindex=\"1\"\r\n     [ngClass]=\"control.invalid && control.touched ? 'invalid-input' : ''\"\r\n     #container\r\n>\r\n  <div>{{label}}</div>\r\n  <input [type]=\"type\"\r\n         [disabled]=\"disabled\"\r\n         (input)=\"onInput()\"\r\n         tabindex=\"1\"\r\n         (blur)=\"applyContainerBlur($event)\"\r\n         [formControl]=\"control\"\r\n  />\r\n</div>\r\n<div class=\"error-messages\">\r\n  <div *ngIf=\"control.invalid && control.touched && control.errors?.['required']\">A mező kitöltése kötelező</div>\r\n  <div *ngIf=\"control.invalid && control.touched && control.errors?.['minlength']\">A mező minimális\r\n    hossza {{ control.errors?.['minlength'].requiredLength }}\r\n  </div>\r\n  <div *ngIf=\"control.invalid && control.touched && control.errors?.['maxlength']\">A mező maximális\r\n    hossza {{ control.errors?.['maxlength'].requiredLength }}\r\n  </div>\r\n  <div *ngIf=\"control.invalid && control.touched && control.errors?.['pattern']\">Nem megfelelő formátum.</div>\r\n</div>\r\n"
        },
        {
            "name": "ModalComponent",
            "id": "component-ModalComponent-fd492ff876f7d1404415178736c4f29b98251e2bd7afd63fed2f6d06078faa9b6be8a1d4d4671932f4d36500e13b847dfbe92ccd610a509bfcb4704b8b3abd00",
            "file": "src/components/modal/modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-modal",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "isOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "modalData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "User | undefined",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onDelete",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "deleteClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, Output} from '@angular/core';\r\nimport {ButtonComponent} from \"../button/button.component\";\r\nimport {CommonModule} from \"@angular/common\";\r\nimport {User} from \"../../../types/User\";\r\nimport {UsersService} from \"../../services/users.service\";\r\nimport {Router} from \"@angular/router\";\r\n\r\n@Component({\r\n  selector: 'app-modal',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    ButtonComponent,\r\n  ],\r\n  templateUrl: './modal.component.html',\r\n  styleUrl: './modal.component.scss'\r\n})\r\nexport class ModalComponent {\r\n  @Input()\r\n  isOpen = false;\r\n  @Input()\r\n  modalData: User | undefined;\r\n  @Output()\r\n  onDelete = new EventEmitter();\r\n\r\n\r\n  constructor(private userService: UsersService, private router: Router) {}\r\n  onClose() {\r\n    this.isOpen = false;\r\n  }\r\n\r\n  deleteClicked() {\r\n    if(this.modalData) {\r\n      this.userService.deleteUser(this.modalData.id!).subscribe(() => {\r\n        this.onDelete.emit();\r\n        this.onClose();\r\n        this.router.navigateByUrl('');\r\n      });\r\n    }\r\n  }\r\n}\r\n",
            "styleUrl": "./modal.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "userService",
                        "type": "UsersService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "userService",
                        "type": "UsersService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div *ngIf=\"isOpen\" class=\"modal-wrapper\">\r\n  <div class=\"modal\">\r\n    <div class=\"modal-text\">Biztosan törli a {{ modalData?.lastName }} {{ modalData?.firstName }} felhasználót?</div>\r\n\r\n    <div class=\"buttons-container\">\r\n      <app-button [label]=\"'Törlés'\" (onClick)=\"deleteClicked()\"/>\r\n      <app-button [label]=\"'Mégse'\" [buttonStyle]=\"'secondary-ghost'\" (onClick)=\"onClose()\"/>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"modal-overlay\" (click)=\"onClose()\"></div>\r\n</div>\r\n"
        },
        {
            "name": "ModifyUserComponent",
            "id": "component-ModifyUserComponent-e5a899c3ef668bee516bddd0ea88e88a43d743bc8090f354e9c1ac25c685a1e0cf5b1300158a7d0714038f5f2492cdea03642873cffd6ee987345a127542c7f5",
            "file": "src/pages/modify-user/modify-user.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-modify-user",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./modify-user.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "active",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "address",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "firstName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "isModalOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "job",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "lastName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "modifyUserForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "options",
                    "defaultValue": "jobOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "telephone",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "userInfo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 39
                }
            ],
            "methodsClass": [
                {
                    "name": "modifyUser",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "navigateToUserList",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openDeleteModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "DropdownComponent",
                    "type": "component"
                },
                {
                    "name": "InputComponent",
                    "type": "component"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "CheckboxComponent",
                    "type": "component"
                },
                {
                    "name": "ModalComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport {ModifyUserService} from \"../../services/modify-user.service\";\r\nimport {ButtonComponent} from \"../../components/button/button.component\";\r\nimport {DropdownComponent} from \"../../components/dropdown/dropdown.component\";\r\nimport {InputComponent} from \"../../components/input/input.component\";\r\nimport {FormBuilder, FormControl, FormGroup, ReactiveFormsModule, Validators} from \"@angular/forms\";\r\nimport {CheckboxComponent} from \"../../components/checkbox/checkbox.component\";\r\nimport {UsersService} from \"../../services/users.service\";\r\nimport {Router} from \"@angular/router\";\r\nimport {jobOptions} from \"../_utils/dropdown-options\";\r\nimport {User} from \"../../../types/User\";\r\nimport {ModalComponent} from \"../../components/modal/modal.component\";\r\n\r\n@Component({\r\n  selector: 'app-modify-user',\r\n  standalone: true,\r\n  imports: [\r\n    ButtonComponent,\r\n    DropdownComponent,\r\n    InputComponent,\r\n    ReactiveFormsModule,\r\n    CheckboxComponent,\r\n    ModalComponent\r\n  ],\r\n  templateUrl: './modify-user.component.html',\r\n  styleUrl: './modify-user.component.scss'\r\n})\r\nexport class ModifyUserComponent {\r\n\r\n  modifyUserForm: FormGroup;\r\n\r\n  firstName: FormControl;\r\n  lastName: FormControl;\r\n  address: FormControl;\r\n  telephone: FormControl;\r\n  job: FormControl;\r\n  active: FormControl;\r\n\r\n  userInfo: User;\r\n\r\n  options = jobOptions;\r\n\r\n  constructor(private usersService: UsersService, private router: Router, private formBuilder: FormBuilder, private modifyHelper: ModifyUserService) {\r\n    this.userInfo = this.modifyHelper.get()!;\r\n\r\n    this.firstName = new FormControl(this.userInfo.firstName, [Validators.required, Validators.minLength(2), Validators.maxLength(64)]);\r\n    this.lastName = new FormControl(this.userInfo.lastName, [Validators.required, Validators.minLength(2), Validators.maxLength(64)]);\r\n    this.address = new FormControl(this.userInfo.address, [Validators.maxLength(128)]);\r\n    this.telephone = new FormControl(this.userInfo.telephone, [Validators.maxLength(128), Validators.pattern('^(?:06|\\\\+36|0036)\\\\d{8,9}$')]);\r\n    this.job = new FormControl(this.userInfo.job, Validators.required);\r\n    this.active = new FormControl(this.userInfo.active);\r\n\r\n    this.modifyUserForm = this.formBuilder.group({\r\n      firstName: this.firstName,\r\n      lastName: this.lastName,\r\n      address: this.address,\r\n      telephone: this.telephone,\r\n      job: this.job,\r\n      active: this.active\r\n    })\r\n\r\n  }\r\n\r\n  isModalOpen = false;\r\n\r\n\r\n  modifyUser() {\r\n    let user = this.modifyUserForm.value;\r\n    user.id = this.userInfo.id;\r\n    this.usersService.updateUser(this.modifyUserForm.value).subscribe(() => this.navigateToUserList());\r\n  }\r\n\r\n  openDeleteModal() {\r\n    this.isModalOpen = true;\r\n  }\r\n\r\n  navigateToUserList() {\r\n    this.router.navigateByUrl('');\r\n  }\r\n}\r\n",
            "styleUrl": "./modify-user.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "usersService",
                        "type": "UsersService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "modifyHelper",
                        "type": "ModifyUserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "usersService",
                        "type": "UsersService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modifyHelper",
                        "type": "ModifyUserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"container\">\r\n  <div class=\"title\">Új felhasználó hozzáadása</div>\r\n  <form [formGroup]=\"modifyUserForm\">\r\n    <app-input [label]=\"'Vezetéknév'\" [control]=\"lastName\"/>\r\n    <app-input [label]=\"'Keresztnév'\" [control]=\"firstName\"/>\r\n    <app-input [label]=\"'Cím'\" [control]=\"address\"/>\r\n    <app-input [label]=\"'Telefon'\" [control]=\"telephone\"/>\r\n    <app-dropdown [label]=\"'Foglalkozás'\" [control]=\"job\" [options]=\"options\"/>\r\n    <app-checkbox [label]=\"'Aktív'\" [control]=\"active\"/>\r\n    <div class=\"buttons-container\">\r\n      <app-button [label]=\"'Módosítás'\" (onClick)=\"modifyUser()\" [disabled]=\"modifyUserForm.invalid\"/>\r\n      <app-button [label]=\"'Törlés'\" [buttonStyle]=\"'secondary'\" (onClick)=\"openDeleteModal()\"/>\r\n      <app-button [label]=\"'Mégsem'\" [buttonStyle]=\"'secondary-ghost'\" (onClick)=\"navigateToUserList()\"/>\r\n    </div>\r\n  </form>\r\n</div>\r\n\r\n<app-modal [modalData]=\"userInfo\" [isOpen]=\"isModalOpen\"/>\r\n\r\n"
        },
        {
            "name": "TableComponent",
            "id": "component-TableComponent-bc6cd64b09cff2840e32250c5108fb0a679a85f13976fb81aba29714edcfde398f7beba10e912b75a50f1f451cfde21b38e3777c134210d278025554d702c462",
            "file": "src/components/table/table.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-table",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./table.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "actionButtons",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nArray of the buttons needed for the table actions.\n",
                    "description": "<p>Array of the buttons needed for the table actions.</p>\n",
                    "line": 32,
                    "type": "Array<IconDefinition> | null",
                    "decorators": []
                },
                {
                    "name": "data",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe data of the table\n",
                    "description": "<p>The data of the table</p>\n",
                    "line": 26,
                    "type": "Array<object>",
                    "decorators": []
                },
                {
                    "name": "headers",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "Array<literal type>",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "actionButtonClicked",
                    "defaultValue": "new EventEmitter<{ iconName: string, user: User }>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "EventEmitter"
                },
                {
                    "name": "mainButtonClicked",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEmits an event when one of the action buttons are clicked.\n",
                    "description": "<p>Emits an event when one of the action buttons are clicked.</p>\n",
                    "line": 38,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "faChevronLeft",
                    "defaultValue": "faChevronLeft",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 102,
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "faChevronRight",
                    "defaultValue": "faChevronRight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 103,
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "faCircleCheck",
                    "defaultValue": "faCircleCheck",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 98,
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "faCircleXmark",
                    "defaultValue": "faCircleXmark",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 99,
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "faFaceSadCry",
                    "defaultValue": "faFaceSadCry",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 101,
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "faPlus",
                    "defaultValue": "faPlus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 100,
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "getHeaders",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "headerKeys",
                    "defaultValue": "new Array<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "isBoolean",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 75
                },
                {
                    "name": "Math",
                    "defaultValue": "Math",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 97,
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "pageCounter",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "shownTableData",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<object>",
                    "optional": false,
                    "description": "",
                    "line": 48
                }
            ],
            "methodsClass": [
                {
                    "name": "actionButtonHandler",
                    "args": [
                        {
                            "name": "iconName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "user",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "iconName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "user",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "calculateTable",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "findCell",
                    "args": [
                        {
                            "name": "headerCell",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "headerCell",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "turnPage",
                    "args": [
                        {
                            "name": "pageNumber",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pageNumber",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "FaIconComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnChanges, OnInit, Output} from '@angular/core';\r\nimport {faChevronLeft, faChevronRight, faPlus, IconDefinition} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {CommonModule} from \"@angular/common\";\r\nimport {ButtonComponent} from \"../button/button.component\";\r\nimport {FaIconComponent} from \"@fortawesome/angular-fontawesome\";\r\nimport {faCircleCheck, faCircleXmark, faFaceSadCry} from \"@fortawesome/free-regular-svg-icons\";\r\nimport {User} from \"../../../types/User\";\r\n\r\n@Component({\r\n  selector: 'app-table',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    ButtonComponent,\r\n    FaIconComponent\r\n  ],\r\n  templateUrl: './table.component.html',\r\n  styleUrl: './table.component.scss'\r\n})\r\nexport class TableComponent implements OnChanges, OnInit {\r\n\r\n  /**\r\n   * The data of the table\r\n   * */\r\n  @Input()\r\n  data: Array<object> = [];\r\n\r\n  /**\r\n   * Array of the buttons needed for the table actions.\r\n   */\r\n  @Input()\r\n  actionButtons: Array<IconDefinition> | null = null;\r\n\r\n  /**\r\n   * Emits an event when one of the action buttons are clicked.\r\n   */\r\n  @Output()\r\n  mainButtonClicked = new EventEmitter();\r\n\r\n  @Output()\r\n  actionButtonClicked = new EventEmitter<{ iconName: string, user: User }>();\r\n\r\n  @Input()\r\n  headers: Array<{ key: string, displayName: string }>= [];\r\n\r\n  headerKeys = new Array<string>();\r\n  pageCounter = 1;\r\n  shownTableData: Array<object> = [];\r\n\r\n  actionButtonHandler(iconName: string, user: object){\r\n    this.actionButtonClicked.emit({iconName: iconName, user: user as User});\r\n  }\r\n\r\n  ngOnChanges() {\r\n    this.calculateTable();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if(!this.headers) {\r\n      this.headers = this.getHeaders();\r\n    } else {\r\n      this.headerKeys = this.headers.map(header => {\r\n        return header.key;\r\n      });\r\n    }\r\n  }\r\n\r\n  getHeaders = () => {\r\n    this.headerKeys = Object.keys(this.data[0]);\r\n    return Object.keys(this.data[0] ?? []).map(item =>{\r\n      return {key: item, displayName: item}\r\n    });\r\n  }\r\n\r\n  isBoolean = (value: any) =>  {return typeof value === 'boolean'}\r\n\r\n\r\n\r\n  turnPage(pageNumber: number) {\r\n    this.pageCounter += pageNumber;\r\n    this.calculateTable();\r\n  }\r\n\r\n  calculateTable() {\r\n    if(this.data.length !== 0 && this.pageCounter > Math.ceil(this.data.length / 5)) {\r\n      --this.pageCounter;\r\n    }\r\n\r\n    const starterIndex = (this.pageCounter -1) * 5;\r\n    this.shownTableData = this.data.slice(starterIndex, starterIndex + 5);\r\n  }\r\n\r\n  findCell(headerCell: string, row: any): string {\r\n    return row[headerCell];\r\n  }\r\n\r\n  protected readonly Math = Math;\r\n  protected readonly faCircleCheck = faCircleCheck;\r\n  protected readonly faCircleXmark = faCircleXmark;\r\n  protected readonly faPlus = faPlus;\r\n  protected readonly faFaceSadCry = faFaceSadCry;\r\n  protected readonly faChevronLeft = faChevronLeft;\r\n  protected readonly faChevronRight = faChevronRight;\r\n}\r\n",
            "styleUrl": "./table.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnChanges",
                "OnInit"
            ],
            "templateData": "<ng-container *ngIf=\"data.length > 0; then table; else empty\"></ng-container>\r\n<ng-template #table>\r\n  <app-button [iconName]=\"faPlus\" [label]=\"'Létrehozás'\" (onClick)=\"mainButtonClicked.emit()\"/>\r\n  <table>\r\n    <thead>\r\n    <tr>\r\n      <th *ngFor=\"let header of headers\"> {{ header.displayName }}</th>\r\n      <th *ngIf=\"actionButtons\" [colSpan]=\"actionButtons.length\" class=\"actions\"> Műveletek</th>\r\n    </tr>\r\n    </thead>\r\n    <tbody>\r\n    <tr *ngFor=\"let row of shownTableData; let i = index\" [ngStyle]=\"{'visibility':Math.floor(i / 5) === pageCounter ? 'visible' : 'none'}\">\r\n      <td *ngFor=\"let headerCell of headers\">\r\n        <ng-container *ngIf=\"isBoolean(findCell(headerCell.key, row)); then checkbox; else text;\"></ng-container>\r\n        <ng-template #checkbox>\r\n          <fa-icon [icon]=\"findCell(headerCell.key, row) ? faCircleCheck : faCircleXmark\" size=\"xl\"/>\r\n        </ng-template>\r\n        <ng-template #text>\r\n          {{ findCell(headerCell.key, row) }}\r\n        </ng-template>\r\n      </td>\r\n      <td *ngFor=\"let action of actionButtons\">\r\n        <app-button [iconName]=\"action\" class=\"action-button\" (onClick)=\"actionButtonHandler(action.iconName, row)\"/>\r\n      </td>\r\n    </tr>\r\n    </tbody>\r\n  </table>\r\n  <div class=\"pager\">\r\n    <app-button [iconName]=\"faChevronLeft\" (onClick)=\"turnPage((-1))\" [disabled]=\"pageCounter === 1\"/>\r\n    {{pageCounter}}. oldal\r\n    <app-button [iconName]=\"faChevronRight\" (onClick)=\"turnPage(1)\" [disabled]=\"pageCounter >= data.length / 5\"/>\r\n  </div>\r\n</ng-template>\r\n\r\n<ng-template #empty>\r\n  <div class=\"empty\">\r\n    <fa-icon [icon]=\"faFaceSadCry\" size=\"8x\"/>\r\n    <b class=\"title\">Nincs felhasználó</b>\r\n    <p>Eddig még nincs egyetlen megjelenítendő felhasználó sem.</p>\r\n    <app-button [label]=\"'Új felhasználó hozzáadása'\" [iconName]=\"faPlus\" (onClick)=\"mainButtonClicked.emit()\"></app-button>\r\n  </div>\r\n</ng-template>\r\n"
        },
        {
            "name": "UserListComponent",
            "id": "component-UserListComponent-222cc882b50e58a0fe9bf966a7f85372ff33c3fc059d2bea4816df053d44b124805f869f0472f00256de4adab91c086f669fcc17ca4a9855a59d1234f7063145",
            "file": "src/pages/user-list/user-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-user-list",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./user-list.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "faPen",
                    "defaultValue": "faPen",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "faTrash",
                    "defaultValue": "faTrash",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "headers",
                    "defaultValue": "[\r\n    {key: 'lastName', displayName: 'Vezetéknév'},\r\n    {key: 'firstName', displayName: 'Keresztnév'},\r\n    {key: 'address', displayName: 'Cím'},\r\n    {key: 'telephone', displayName: 'Telefonszám'},\r\n    {key: 'job', displayName: 'Foglalkozás'},\r\n    {key: 'active', displayName: 'Aktív'},\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<literal type>",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "isModalOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "selectedUser",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | undefined",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "users",
                    "defaultValue": "new Array<User>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "actionButtonHandler",
                    "args": [
                        {
                            "name": "$event",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addNewUser",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadTable",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "TableComponent",
                    "type": "component"
                },
                {
                    "name": "ModalComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport {TableComponent} from \"../../components/table/table.component\";\r\nimport {UsersService} from \"../../services/users.service\";\r\nimport {User} from \"../../../types/User\";\r\nimport {Router} from \"@angular/router\";\r\nimport {faPen, faTrash} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {ModifyUserService} from \"../../services/modify-user.service\";\r\nimport {ModalComponent} from \"../../components/modal/modal.component\";\r\n\r\n@Component({\r\n  selector: 'app-user-list',\r\n  standalone: true,\r\n    imports: [\r\n        TableComponent,\r\n        ModalComponent\r\n    ],\r\n  templateUrl: './user-list.component.html',\r\n  styleUrl: './user-list.component.scss'\r\n})\r\nexport class UserListComponent implements OnInit {\r\n  users = new Array<User>();\r\n  headers: Array<{ key: string; displayName: string }> = [\r\n    {key: 'lastName', displayName: 'Vezetéknév'},\r\n    {key: 'firstName', displayName: 'Keresztnév'},\r\n    {key: 'address', displayName: 'Cím'},\r\n    {key: 'telephone', displayName: 'Telefonszám'},\r\n    {key: 'job', displayName: 'Foglalkozás'},\r\n    {key: 'active', displayName: 'Aktív'},\r\n  ];\r\n\r\n  constructor(private usersService: UsersService, private router : Router, private modifyHelper: ModifyUserService) {}\r\n    ngOnInit(): void {\r\n      this.loadTable();\r\n    }\r\n\r\n    addNewUser() {\r\n      this.router.navigateByUrl('create-user');\r\n    }\r\n\r\n  protected readonly faTrash = faTrash;\r\n  protected readonly faPen = faPen;\r\n  isModalOpen = false;\r\n  selectedUser: User | undefined;\r\n\r\n  actionButtonHandler($event: { iconName: string; user: User }) {\r\n    switch ($event.iconName){\r\n      case 'trash':\r\n        this.selectedUser = $event.user;\r\n        this.isModalOpen = true;\r\n        break;\r\n      case 'pen':\r\n        this.modifyHelper.set($event.user);\r\n        this.router.navigateByUrl('modify-user');\r\n        break;\r\n    }\r\n  }\r\n\r\n  loadTable() {\r\n    this.usersService.listUsers().subscribe(result => {\r\n      this.users = result['content'].filter((row: User) => row.id);\r\n    });\r\n    this.isModalOpen = false;\r\n  }\r\n}\r\n",
            "styleUrl": "./user-list.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "usersService",
                        "type": "UsersService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "modifyHelper",
                        "type": "ModifyUserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "usersService",
                        "type": "UsersService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modifyHelper",
                        "type": "ModifyUserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-table [data]=\"users\"\r\n           (mainButtonClicked)=\"addNewUser()\"\r\n           [headers]=\"headers\"\r\n           [actionButtons]=\"[faTrash, faPen]\"\r\n           (actionButtonClicked)=\"actionButtonHandler($event)\"\r\n/>\r\n<app-modal [modalData]=\"selectedUser\" [isOpen]=\"isModalOpen\" (onDelete)=\"loadTable()\"/>\r\n"
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "appConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\r\n  providers: [provideRouter(routes), provideHttpClient()]\r\n}"
            },
            {
                "name": "jobOptions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/pages/_utils/dropdown-options.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  {value: 'KERTESZ', displayName: 'Kertesz'},\r\n  {value: 'PEK', displayName: 'Pek'},\r\n  {value: 'HENTES', displayName: 'Hentes'}\r\n]"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/app/app.config.ts": [
                {
                    "name": "appConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\r\n  providers: [provideRouter(routes), provideHttpClient()]\r\n}"
                }
            ],
            "src/pages/_utils/dropdown-options.ts": [
                {
                    "name": "jobOptions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/pages/_utils/dropdown-options.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  {value: 'KERTESZ', displayName: 'Kertesz'},\r\n  {value: 'PEK', displayName: 'Pek'},\r\n  {value: 'HENTES', displayName: 'Hentes'}\r\n]"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 4,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 57,
                "coverageCount": "4/7",
                "status": "good"
            },
            {
                "filePath": "src/components/checkbox/checkbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CheckboxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/components/dropdown/dropdown.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DropdownComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/components/input/input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/components/modal/modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/components/table/table.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TableComponent",
                "coveragePercent": 12,
                "coverageCount": "3/24",
                "status": "low"
            },
            {
                "filePath": "src/pages/_utils/dropdown-options.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "jobOptions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/pages/create-user/create-user.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateUserComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/pages/modify-user/modify-user.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ModifyUserComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/pages/user-list/user-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/services/modify-user.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ModifyUserService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/services/users.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UsersService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            }
        ]
    }
}